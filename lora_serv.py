from web3 import *
import serial

web3 = Web3(IPCProvider(r'\\.\pipe\node2'))
web3.eth.defaultAccount = web3.eth.coinbase
web3.personal.unlockAccount(web3.eth.defaultAccount, '11111111')
standard_contract = '0x60606040526004361061007f5763ffffffff60e060020a6000350416631d5e3fe58114610081578063435cfadc146100a6578063469e9067146101195780638aba4659146101bc5780638da5cb5b146101d2578063bf1fe42014610201578063c7fb412c14610217578063dc55509014610236578063fe173b9714610249575b005b341561008c57600080fd5b61009461025c565b60405190815260200160405180910390f35b34156100b157600080fd5b61007f60048035600160a060020a0316906024803563ffffffff169160443591606435919060a49060843590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061026295505050505050565b341561012457600080fd5b610138600160a060020a0360043516610548565b60405163ffffffff8316815260406020820181815290820183818151815260200191508051906020019080838360005b83811015610180578082015183820152602001610168565b50505050905090810190601f1680156101ad5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34156101c757600080fd5b61007f600435610614565b34156101dd57600080fd5b6101e5610649565b604051600160a060020a03909116815260200160405180910390f35b341561020c57600080fd5b61007f600435610658565b341561022257600080fd5b61007f600160a060020a036004351661068d565b341561024157600080fd5b6100946106cf565b341561025457600080fd5b6100946106d5565b60005481565b6001543a111561027157600080fd5b600160a060020a03851660009081526003602052604081205463ffffffff161161029a57600080fd5b600160a060020a03851660009081526003602052604090205463ffffffff908116908516116102c857600080fd5b84600160a060020a03166001858360405160e060020a63ffffffff84160281526004810182805190602001908083835b602083106103175780518252601f1990920191602091820191016102f8565b6001836020036101000a0380198251168184511617909252505050919091019350604092505050518091039020601b86866040516000815260200160405260405193845260ff9092166020808501919091526040808501929092526060840192909252608090920191516020810390808403906000865af1151561039a57600080fd5b505060206040510351600160a060020a03161480610499575084600160a060020a03166001858360405160e060020a63ffffffff84160281526004810182805190602001908083835b602083106104025780518252601f1990920191602091820191016103e3565b6001836020036101000a0380198251168184511617909252505050919091019350604092505050518091039020601c86866040516000815260200160405260405193845260ff9092166020808501919091526040808501929092526060840192909252608090920191516020810390808403906000865af1151561048557600080fd5b505060206040510351600160a060020a0316145b15156104a457600080fd5b60408051908101604090815263ffffffff861682526020808301849052600160a060020a03881660009081526003909152208151815463ffffffff191663ffffffff919091161781556020820151816001019080516105079291602001906106db565b5050600054600160a060020a03331691503a0280156108fc0290604051600060405180830381858888f19350505050151561054157600080fd5b5050505050565b60036020528060005260406000206000915090508060000160009054906101000a900463ffffffff1690806001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561060a5780601f106105df5761010080835404028352916020019161060a565b820191906000526020600020905b8154815290600101906020018083116105ed57829003601f168201915b5050505050905082565b60045433600160a060020a0390811691161461062f57600080fd5b600254603c01421161064057600080fd5b60005542600255565b600454600160a060020a031681565b60045433600160a060020a0390811691161461067357600080fd5b600254603c01421161068457600080fd5b60015542600255565b60045433600160a060020a039081169116146106a857600080fd5b600160a060020a03166000908152600360205260409020805463ffffffff19166001179055565b60025481565b60015481565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061071c57805160ff1916838001178555610749565b82800160010185558215610749579182015b8281111561074957825182559160200191906001019061072e565b50610755929150610759565b5090565b61077391905b80821115610755576000815560010161075f565b905600a165627a7a72305820a45d3d27d24a66addd5b942e77c6259318b69ee563f97ed101eaeefe5c9e1a690029'
abi = r'[ { "constant": true, "inputs": [], "name": "gasCost", "outputs": [ { "name": "", "type": "uint256", "value": "80000" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [ { "name": "_addr", "type": "address" }, { "name": "_nonce", "type": "uint32" }, { "name": "_r", "type": "bytes32" }, { "name": "_s", "type": "bytes32" }, { "name": "_value", "type": "bytes" } ], "name": "writeRecord", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [ { "name": "", "type": "address" } ], "name": "records", "outputs": [ { "name": "nonce", "type": "uint32", "value": "1529700936" }, { "name": "value", "type": "bytes", "value": "0x1928" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [ { "name": "_gasCost", "type": "uint256" } ], "name": "setGasCost", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "owner", "outputs": [ { "name": "", "type": "address", "value": "0x721ad90ef0617a111013fd4c5122b18384c04085" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [ { "name": "_gasPrice", "type": "uint256" } ], "name": "setGasPrice", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "_addr", "type": "address" } ], "name": "resetRecord", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "updateTime", "outputs": [ { "name": "", "type": "uint256", "value": "1529671122" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "gasPrice", "outputs": [ { "name": "", "type": "uint256", "value": "50000000000" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "inputs": [ { "name": "_gasCost", "type": "uint256", "index": 0, "typeShort": "uint", "bits": "256", "displayName": "&thinsp;<span class=\"punctuation\">_</span>&thinsp;gas Cost", "template": "elements_input_uint", "value": "80000" }, { "name": "_gasPrice", "type": "uint256", "index": 1, "typeShort": "uint", "bits": "256", "displayName": "&thinsp;<span class=\"punctuation\">_</span>&thinsp;gas Price", "template": "elements_input_uint", "value": "50000000000" } ], "payable": true, "stateMutability": "payable", "type": "constructor" }, { "payable": true, "stateMutability": "payable", "type": "fallback" } ]'

header = bytearray('bonboru93', encoding='ascii')
trailer = bytearray('39urobnob', encoding='ascii')
with serial.Serial('COM3', 9600) as mySerial:
    while True:
        mySerial.read_until(header)
        data = mySerial.read_until(trailer)
        contract_addr = Web3.toChecksumAddress(data[:20].hex())
        print('contract=', contract_addr)
        if web3.eth.getCode(contract_addr).hex() != standard_contract:
            print('Invalid')
            continue

        contract = web3.eth.contract(address=contract_addr, abi=abi)
        gasCost = contract.functions.gasCost().call()
        device_addr = Web3.toChecksumAddress(data[20:40].hex())
        print('device=', device_addr)
        signature_r = data[40:72]
        signature_s = data[72:104]
        nonce = int.from_bytes(data[104:108], 'big')
        value = data[108:-9]
        write_function = contract.functions.writeRecord(device_addr, nonce, signature_r, signature_s, value)
        if write_function.estimateGas() > gasCost:
            print('Invalid')
            continue
        write_function.transact()
        print('Sent')

